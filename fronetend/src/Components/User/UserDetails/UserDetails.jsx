import React, { useEffect, useState, useRef } from "react";
import axios from "axios";
import { Link } from "react-router-dom";
import { jsPDF } from "jspdf";
import 'jspdf-autotable';
import './UserDetails.css';

const URL = "http://localhost:3001/users";

const fetchHandler = async () => {
  return await axios.get(URL).then((res) => res.data);
};

export default function UserDetails() {
  const [users, setUsers] = useState([]);
  const [filteredUsers, setFilteredUsers] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [noResults, setNoResults] = useState(false);

  useEffect(() => {
    fetchHandler().then((data) => {
      const usersList = data.users || data;
      setUsers(usersList);
      setFilteredUsers(usersList);
    });
  }, []);

  const deleteHandler = async (userId) => {
    try {
      await axios.delete(`http://localhost:3001/users/${userId}`);
      const updatedUsers = users.filter(user => user._id !== userId);
      setUsers(updatedUsers);
      setFilteredUsers(updatedUsers);
    } catch (error) {
      console.error("Error deleting user:", error);
    }
  };

  // Update the filtered users in search
  useEffect(() => {
    const filtered = users.filter((user) =>
      user.name.toLowerCase().includes(searchQuery.toLowerCase())
    ).filter((user) => user.role !== "admin");

    setFilteredUsers(filtered);
    setNoResults(filtered.length === 0);
  }, [searchQuery, users]);

  //  PDF report
  const generatePDF = () => {
    const doc = new jsPDF({
      orientation: 'landscape',
      unit: 'pt',
      format: 'a4'
    });

    // title
    doc.setFontSize(20);
    doc.text("Employee Report", 14, 20);

    //  date
    doc.setFontSize(12);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 14, 50);

    // columns and rows
    const columns = [
      { header: "Id", dataKey: "_id" },
      { header: "Name", dataKey: "name" },
      { header: "Username", dataKey: "userName" },
      { header: "Email", dataKey: "email" },
      { header: "Contact Number", dataKey: "contactNumber" },
      { header: "Address", dataKey: "address" },
      { header: "Salary", dataKey: "salary" },
      { header: "Total Salary with OT", dataKey: "total_salary_with_OT" },
    ];

    const rows = filteredUsers.map(user => ({
      _id: user._id,
      name: user.name,
      userName: user.userName,
      email: user.email,
      contactNumber: user.contactNumber,
      address: user.address,
      salary: user.salary,
      total_salary_with_OT: user.total_salary_with_OT
    }));

    doc.autoTable({
      columns,
      body: rows,
      startY: 60,
      styles: {
        cellPadding: 3,
        fontSize: 10,
        overflow: 'linebreak'  
      },
      columnStyles: {
        _id: { cellWidth: 100 }, 
        name: { cellWidth: 100 },
        userName: { cellWidth: 100 },
        email: { cellWidth: 100 },
        contactNumber: { cellWidth: 100 },
        address: { cellWidth: 100 },
        salary: { cellWidth: 100 },
        total_salary_with_OT: { cellWidth: 100 }
      },
      headStyles: {
        fillColor: [69, 149, 234] 
      },
    });



    doc.setFontSize(10);
    doc.text("Generated by Employee Management System", 14, doc.autoTable.previous.finalY + 20);
    doc.text("For more details, contact JayagamaStores.com", 14, doc.autoTable.previous.finalY + 30);

    // Save PDF
    doc.save("Employee_Report.pdf");
  };

  return (
    <div className="user-details-container">
      <div className="search-container">
        {/* Search bar */}
        <input
          onChange={(e) => setSearchQuery(e.target.value)}
          type="text"
          name="search"
          placeholder="Search employees by name"
          value={searchQuery}
        />
      </div>

      {noResults ? (
        <div className="no-results">
          <p>No employees found</p>
        </div>
      ) : (
        <div className="user-list">
          <table>
            <thead>
              <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Username</th>
                <th>Email</th>
                <th>Contact Number</th>
                <th>Address</th>
                <th>Role</th>
                <th>Salary</th>
                <th>Total Salary with OT</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody>
              {filteredUsers.map((user) => (
                <tr key={user._id}>
                  <td>{user._id}</td>
                  <td>{user.name}</td>
                  <td>{user.userName}</td>
                  <td>{user.email}</td>
                  <td>{user.contactNumber}</td>
                  <td>{user.address}</td>
                  <td>{user.role}</td>
                  <td>${user.salary}</td>
                  <td>${user.total_salary_with_OT}</td>
                  <td>
                    <button className="action-button delete" onClick={() => deleteHandler(user._id)}>Delete</button>
                    <Link to={`/UpdateUser/${user._id}`}>
                      <button className="action-button update">Update</button>
                    </Link>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>

          <div className="print-footer">
            <p>Generated by Employee Management System</p>
            <p>For more details, contact JayagamaStores.com</p>
          </div>
        </div>
      )}

      <button className="download-button" onClick={generatePDF}>Download Report</button>
    </div>
  );
}
